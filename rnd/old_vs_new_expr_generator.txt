
type conversion, eg.

struct wec [int x, int64 y, int z]

wec w : 2, 3, 4

push 2
push 3
int32to62	// special op.
push 4

// stack /2/0/3/4 -> pop&copy to "w"


 ______________
 
 
 array tms. generic
 
 array[int,3] a: 12 43 54
 
                   5   6   7
 stack: [][][][][][12][43][54][][][] 
 
 print a[2]
 
 ResolveAndPushVariable
 
	push 5			// array address
	push 2			// handle expr. "[2]"
	call "get"		// stack = 5,2. pop 2, push 2 * sizeof(int)
					// getter: oletus että pinossa on aina osoite ja arg.
					// tämän jälkeen stack = 7
	
	
 
 
 ______________
 
GENERATOR
 1 init: text instructions
 2 init: struct defs
 3 init: functions
 4 global code: GenerateCodeBlock()
 5 function code: GenerateFunctionCode() -> GenerateCodeBlock()
 6 init: function addresses
 
GenerateCodeBlock: iterate thru parser node tree

GenerateExpression:
get the first name token
	a) if find context(name), generate a function call
	b) callback name? callback call
	c) member name? assignment
	d) type name? initialization
	e) return?
	f) skip struct, function def.
	g) otherwise error
	
NEW

semantics

	IDEA: merkkaa jo semanticsissa (AnalyzeExpr) minkä tyyppinen EXPR on, esim.
	EXPR_STRUCT_DEF, EXPR_FUNC_DEF, EXPR_ASSIGNMENT jne.

	DONE: uudet NodeTypet, aseta Semanticissa: EXPR_INIT EXPR_INIT_AND_ASSIGN EXPR_FUNCTION EXPR_STRUCT

	OLD types:
		dictionary Semantics.types<name,id> // elementary types
		StructDef[] typeStructDefs // addStructDef, lisää molempiin
		
	NEW types:
		(voisiko (tuunattu) structdef olla uusi tyyppilista?!)
		StructDef on niin kömpelö käyttää että vaatii remonttia:
			- koodia varten en-/decode
		
		

	

	AnalyzeNode (block) --> AnalyzeExpr

		1. function call?
		2. "func"?
			2.1 CreateStructDef(args)
			2.2 create function and context
			2.3 set current context = function context
			2.3 code block --> AnalyzeNode
		3. "struct"
			3.1 addstructdef
		4. variable type
			4.1 chars, eg. "chars [12] name"
			4.2 square brackets, eg. "person [5] players"
			4.3 other variable
	

generator
	GenerateAssignment kuten ennenkin? 
	for all args
		addToTypeList(resolvemember(arg))
	etsi sopiva callback Common.callbackeista
	add a call to match typelist
	
	ResolveArgument
		