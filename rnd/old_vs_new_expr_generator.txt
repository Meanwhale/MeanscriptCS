struct vec2 [int x, int y]
struct person [text name, ptr [vec2] point, ptr[person] boss]
array [person, 3] arr
arr[1].point: (23,45)
1   2  3      4

1) push arr address
2) push 1 -> call array getter -> stack: 2nd item's address
3) add point's offset -> stack: point's dynamic address
4) copy struct values to dynamic address

arr[1].point.x: 23
1   2  3     4  5

1) push arr address
2) push 1 -> call array getter -> stack: 2nd item's address
3) add point's offset -> stack: point's dynamic address
4) 

---

muistinhallinta

 - onko pointertypessä järkeä jos ao. ideat toteutetaan?
 - muistivuodon estämiseksi DO:lla pitää olla omistaja
 - sen lisäksi voi olla heikkoja linkkejä eli osoitteita DO:n
 
struct vec2 [int x, int y]
struct person [
	text name,
	map [int, vec2] refs
]

person p : "Jack", null
// ...
p: "Joe", null						// pitää kutsua "destruktoria":
									// p:n osoite pinoon
									// DESTRUCTOR pop + 1 (refsin osoite namen jälkeen), type
									// sama sitten kaikille mapin arvoille, joilla ei tosin ole
									// vapautettavaa.
p: "Jill", [(1,(2,3)),(4,(5,6))]	// IDEA

person q : give(p)					// IDEA: p -> null

 - huono idea: JOS HALUAISI PITÄÄ YKSINKERTAISENA NIIN DYNAAMISIA OBJECKTEJA OLISI VAIN GLOBAALISSA.
   muuten voisi käyttää vain (heikkoja) viitteitä
 
 ______________
 
pointteri

struct vec2 [int x, int y]
vec2 v : 12, 34

ptr[vec2] p : v						// push "v"'s values to stack -> copy to dynamic
ptr[vec2] q : 56, 78

map[int, ptr[vec2]] m				// map: <int> --> <dynamic object address of type "vec2">
m.add (123, ptr[vec2](456,789))		// push "lambda variable" to stack and give as an arg.
m.add (101, v)						// ERROR: type mismatch
m.add (102, ptr[vec2](v))			// good. creates a new dynamic object.
m.add (101, p)						// good.

map[int, vec2] n
n.add (234, vec2(345,345))			// "lambda variable"
n.add (123, (456,789))				// same: type is got from something like "assign target"
n.add (345, p)						// ERROR: type mismatch
n.add (345, valueof(p))				// good. TODO: replace "valueof"
m.add (345, v)						// good.

 ______________
 
operaattorit

 - if, else yms.
 - laskutoimitukset
		- override kaikille 2 numeron comboille
		- jos numerot ovat esim. int ja float niin palauta float

12 + -23	-->		<12>	<+>		<-23>
-23 -23		-->		<-23>	<->		<23>
-a + 12		-->		<->		<a>		<+>		<12>
					[0]		[1]		[2]		[3]
 - viimeisin
		- pinossa a:n arvo ja 12
		- copy [1] to reg.
		- negate reg.
		- add [3] to reg.
 ______________

callback as an argument:
 - callnametype voi olla vain ensimmäisenä
 - jos () eikä seuraavaa niin comma-separated args
 - jos () ja seuraava niin ():ssa on yksi argseista
 

	F
	F2 (a1, a2)
	F1 a1
	F2 a1 a2
	F2 (F3 x) a2
	
bool b : true
 ______________
 
 assign struct:
 
 struct person [text name, int age]
 
 person p: "Jarmo" 46
 
 PushAssignValues
	- if struct: iterate struct COMMA-SEPARATED members -> PushAssignValues
	- if array: for each COMMA-SEPARATED item -> PushAssignValues
	- else push single value etc.
 
 ______________
 

type conversion, eg.

struct wec [int x, int64 y, int z]

wec w : 2, 3, 4

push 2
push 3
int32to62	// special op.
push 4

// stack /2/0/3/4 -> pop&copy to "w"

 ______________
 
 array tms. generic
 
 array[int,3] a: 12 43 54
 
                   5   6   7
 stack: [][][][][][12][43][54][][][] 
 
 print a[2]
 
 ResolveAndPushVariable
 
	push 5			// array address
	push 2			// handle expr. "[2]"
	call "get"		// stack = 5,2. pop 2, push 2 * sizeof(int)
					// getter: oletus että pinossa on aina osoite ja arg.
					// tämän jälkeen stack = 7
	
	
 
 
 ______________
 
GENERATOR
 1 init: text instructions
 2 init: struct defs
 3 init: functions
 4 global code: GenerateCodeBlock()
 5 function code: GenerateFunctionCode() -> GenerateCodeBlock()
 6 init: function addresses
 
GenerateCodeBlock: iterate thru parser node tree

GenerateExpression:
get the first name token
	a) if find context(name), generate a function call
	b) callback name? callback call
	c) member name? assignment
	d) type name? initialization
	e) return?
	f) skip struct, function def.
	g) otherwise error
	
NEW

semantics

	IDEA: merkkaa jo semanticsissa (AnalyzeExpr) minkä tyyppinen EXPR on, esim.
	EXPR_STRUCT_DEF, EXPR_FUNC_DEF, EXPR_ASSIGNMENT jne.

	DONE: uudet NodeTypet, aseta Semanticissa: EXPR_INIT EXPR_INIT_AND_ASSIGN EXPR_FUNCTION EXPR_STRUCT

	OLD types:
		dictionary Semantics.types<name,id> // elementary types
		StructDef[] typeStructDefs // addStructDef, lisää molempiin
		
	NEW types:
		(voisiko (tuunattu) structdef olla uusi tyyppilista?!)
		StructDef on niin kömpelö käyttää että vaatii remonttia:
			- koodia varten en-/decode
		
		

	

	AnalyzeNode (block) --> AnalyzeExpr

		1. function call?
		2. "func"?
			2.1 CreateStructDef(args)
			2.2 create function and context
			2.3 set current context = function context
			2.3 code block --> AnalyzeNode
		3. "struct"
			3.1 addstructdef
		4. variable type
			4.1 chars, eg. "chars [12] name"
			4.2 square brackets, eg. "person [5] players"
			4.3 other variable
	

generator
	GenerateAssignment kuten ennenkin? 
	for all args
		addToTypeList(resolvemember(arg))
	etsi sopiva callback Common.callbackeista
	add a call to match typelist
	
	ResolveArgument
		